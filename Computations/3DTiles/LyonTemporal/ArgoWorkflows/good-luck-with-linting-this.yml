# Try finding them with the indications that the "argo lint" linter 
# provides you...
# If you get stuck read the last line of this file
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    # This workflow choses to define the parameter values in two locations
    #  - a parameter file that should be passed in argument of the submission 
    #    e.g. `argo submit argo submit <...> --parameter-file params.yaml`
    #, - within this workflow: refer below to the persistedVolume parameter
    #    definition
    - name: persistedVolume   # Must be define here because volume defined here
      # This is not DRY because of the volumes section
      value: /data/host

  templates:
  - name: main
    steps:
    - - name: collect-boroughs
        template: collect-lyon-data
        arguments:
          parameters:
          - name: borough
            value: "{{item}}"
          - name: pattern
            value: "{{workflow.parameters.pattern}}"
          - name: results_dir
            value: "{{workflow.parameters.experiment_output_dir}}/stage_1"
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
        withParam: "{{workflow.parameters.boroughs}}"
    - - name: print-file-names
       # This is a lousy comment to disguise the fact that the next line
       # is bugged. Indeed the indentation in the following block is wrong: 
       # it misses a single space.
       template: whalesay
       arguments:
         parameters:
         - name: message
           value: "{{steps.collect-boroughs.outputs.parameters}}"
    - - name: loop-on-split-buildings
        template: split-buildings
        arguments:
          parameters:
          - name: input_filename
            value: "{{item}}"
          - name: output_filename
            # We here need to express the equivalent of method
            #   DemoSplitBuildings::derive_output_file_basename_from_input(input_filename)
            # as found in
            #   https://github.com/VCityTeam/UD-Reproducibility/blob/master/Computations/3DTiles/LyonTemporal/PythonCallingDocker/demo_split_buildings.py#L16            
            value: "{{=strings.TrimSuffix(filepath.Base(item), path.Ext(filepath.Base(item)))}}_splited.gml}"
          - name: outpur_dir
            value: "{{=filepath.Dir(filepath.Dir(item))}}/stage_2"
        withParam: "{{steps.collect-boroughs.outputs.parameters}}"

  - name: collect-lyon-data
    inputs:
      parameters:
      - name: borough
      - name: pattern
      - name: results_dir
      - name: vintage
    container:
      image: vcity:collect_lyon_data
      imagePullPolicy: Never
      args: ["python3", "entrypoint.py",
            "--borough",     "{{inputs.parameters.borough}}",
            "--pattern",     "{{inputs.parameters.pattern}}",
            "--results_dir", "{{inputs.parameters.results_dir}}",
            "--vintage",     "{{inputs.parameters.vintage}}",
            "--volume",      "{{workflow.parameters.persistedVolume}}"]
      volumeMounts:                     # same syntax as k8s Pod spec
       # Mount workdir volume at /data/host before invoking contained
       - name: workdir
         mountPath: /data/host
    outputs:
      parameters:
      - name: resulting-filenames
        # A single run appends its resulting filenames to the possibly already 
        # existing results file.
        valueFrom:
          # Set the value of this output parameter to the contents of the
          # file designated by this path
          path: "{{workflow.parameters.persistedVolume}}/{{inputs.parameters.results_dir}}/Resulting_Filenames.txt"
            
  - name: split-buildings
    inputs:
      parameters:
      - name: input_filename   # Absolute file path
      - name: output_dir       # Absolute directory path 
      - name: output_filename  # Filename (relative to output_dir)
     # The container is bugged because it is misaligned: it should be dedented
     # of two spaces. Note that, to be faire, in this case `argo lint` can be
     # of some help
      container:
      image: vcity:3Duse
      workingDir: /root/3DUSE/Build/src/utils/cmdline/
      # The third line is bugged because of the args definition that misses 
      # a trailing coma (,)
      args: ["splitCityGMLBuildings",
             "--input-file", "{{inputs.parameters.input_filename}}",
             "--output-filename", "{{inputs.parameters.output_filename}}"
             "--output-dir", "{{inputs.parameters.output_dir}}"]
  
  # On debugging purposes
  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]

# Hint for finding the errors: some mistakes are annotated with the "bugged" 
# string embedded in some comments. But try playing the game without this
# help at first.

