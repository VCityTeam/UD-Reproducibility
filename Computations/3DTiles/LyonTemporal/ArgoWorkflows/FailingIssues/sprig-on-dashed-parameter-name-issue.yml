# Workflow submitted for discussion on github
#   https://github.com/argoproj/argo-workflows/discussions/7284
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    - name: namewithoutdash   
      value:  '{"scalar": "10"}'
    - name: name-with-dash   
      value:  '{"scalar": "20"}'

  templates:
  - name: main
    steps:
    - - name: without-dash
        template: whalesay
        arguments:
          parameters:
          - name: message
            # Applying jsonpath to a parameter name that does NOT use a dash
            # if effective a illustrated by the whale that as expected says
            #      ____ 
            #     < 10 >
            #      ---- 
            value: "{{=jsonpath(workflow.parameters.namewithoutdash, '$.scalar')}}"
            

    - - name: with-dash-without-jsonpath
        template: whalesay
        arguments:
          parameters:
          - name: message
            # Accessing the value of parameter whose name uses a dash does work
            # as illustrated by the whale that will say
            #      __________________ 
            #     < {"scalar": "20"} >
            #      ------------------
            value: "{{workflow.parameters.name-with-dash}}"
            # Note: for this step the evaluator is here Expr (as opposed to 
            # sprig)

    - - name: with-dash-pythonsay
        template: pythonsay
        arguments:
          parameters:
          - name: message
            # Yet, applying jsonpath to a parameter whose name uses a dash
            # seems to fail since the python say here goes
            #   {{=jsonpath(workflow.parameters.name-with-dash, '$.scalar')}}
            value: "{{=jsonpath(workflow.parameters.name-with-dash, '$.scalar')}}"
            # Note: as a partial explanation for the above fails notice that
            # in this context the evaluator is now sprig (as opposed to Expr).
    
    - - name: with-dash-workaround
        template: whalesay
        arguments:
          parameters:
          - name: message
            # It suffice to use the bracket notations for this example to be
            # properly evaluated by sprig. Indeed the whale will here say
            #      ____ 
            #     < 20 >
            #      ---- 
            value: "{{=jsonpath(workflow.parameters['name-with-dash'], '$.scalar')}}"

    - - name: with-dash-whalesay
        template: whalesay
        arguments:
          parameters:
          - name: message
            # A final note: the above with-dash-pythonsay step resolves using 
            # pythonsay in place of whalesay, because when trying to use 
            # whalesay will make this step error (with "exit code 255") after
            # nevertheless "displaying"
            #        This shouldn't happen at 
            #        /usr/share/perl/5.18/Text/Wrap.pm line 84.
            value: "{{=jsonpath(workflow.parameters.name-with-dash, '$.scalar')}}"

  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]
  
  - name: pythonsay
    inputs:
      parameters:
      - name: message
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        print("{{inputs.parameters.message}}")
