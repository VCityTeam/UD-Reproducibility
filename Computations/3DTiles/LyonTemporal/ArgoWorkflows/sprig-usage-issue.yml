# Workflow submitted for discussion on github
#  https://github.com/argoproj/argo-workflows/discussions/7218
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    - name: persistedVolume   
      value: /within-container-mount-point/
    - name: json
      # Seems to be a valid JSON according to some online validators e.g.
      # https://jsonlint.com/ or https://jsononline.net/json-validator
      value: '["one","one\ntwo","one\ntwo\nthree"]'

  templates:
  - name: main
    steps:
    - - name: print-sprig-of-simple-lists
        template: whalesay
        arguments:
          parameters:
          - name: message
            # The whale will duly say
            #            _______ 
            #           < three >
            #            ------- 
            value: "{{=sprig.last( ['one', 'two', 'three'] ) }}" 

    - - name: loop-write-some-result
        template: write-some-result
        arguments:
          parameters:
          - name: some-file-content
            value: "{{item}}"
        withItems: 
          - "one"
          - "two"
          - "three"

    - - name: print-loop-result
        template: whalesay
        arguments:
          parameters:
          - name: message
            # This whale will behave and as expected say
            #         _________________________________________ 
            #        / ["two\none","two\none","two\none\nthree \
            #        \ "]                                      /
            #         ----------------------------------------- 
            value: "{{steps.loop-write-some-result.outputs.parameters.results-values}}"

    - - name: print-sprig-of-loop-result
        # If you try to print the following value with whalesay, you might get
        # the follwing error message
        #    This shouldn't happen at /usr/share/perl/5.18/Text/Wrap.pm line 84.
        # We thus resolve to printing through other means 
        template: print-python
        arguments:
          parameters:
          - name: message
            # But now the (python) printed message goes
            #            {{=sprig.last(steps.loop-write-some-result.outputs.parameters.results-values) }}
            # that is the exact input string without the substitution that
            # expr is supposed (?) to realize, prior to interpreting the result.
            # Note that if this expr substitution is also inhibited when using
            # whalesay, this might explain why whalesay crashes (on that 
            # obscure perl related errof): the whalesay print gets confused by
            # its argument that is a mis-formed perl string...
            value: "{{=sprig.last(steps.loop-write-some-result.outputs.parameters.results-values) }}"
            
  - name: write-some-result
    inputs:
      parameters:
      - name: some-file-content
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import os
        output_filename=os.path.join("{{workflow.parameters.persistedVolume}}",
                                     "results.txt")
        with open(output_filename, "a+") as f:
          f.write("{{inputs.parameters.some-file-content}}" + "\n")
      volumeMounts:
       - name: workdir
         mountPath: "{{workflow.parameters.persistedVolume}}"
    outputs:
      parameters:
      - name: results-values
        valueFrom:
          path: "{{workflow.parameters.persistedVolume}}/results.txt"

  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]

  # When whalesay fails/crashed we need a plan B print
  - name: print-python
    inputs:
      parameters:
      - name: message
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        print("{{inputs.parameters.message}}")
