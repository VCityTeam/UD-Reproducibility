# Because the following was in a dead end (on trying to re-use the list
# of output filenames as variables of the workflow) two debugging workflows
# (working with a simpler context) where realized
#   sprig-usage-issue.yml
#   sprig-on-flaky-json-issue.yml
# each one proposed for discussion on arg-worflows github repository, 
# respectively refer to
#   https://github.com/argoproj/argo-workflows/discussions/7218
#   https://github.com/argoproj/argo-workflows/discussions/7220
#
# This workflow is kept here for resuming work when low level problems
# get answered.

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-
spec:
  entrypoint: main
  volumes:
  - name: workdir
    hostPath:
      path: /data/host
  arguments:
    parameters:
    # This workflow choses to define the parameter values in two locations
    #  - a parameter file that should be passed in argument of the submission 
    #    e.g. `argo submit argo submit <...> --parameter-file params.yaml`
    #, - within this workflow: refer below to the persistedVolume parameter
    #    definition
    # 
    # For both cases, parameter values can be changed at run-time with 
    # the the -p option of `argo submit` e.g.:
    # argo submit parameter.yaml -p persistedVolume="/tmp"
    #
    # persistedVolume value setting belongs in the workflow because it is
    # precisely the concern of this workflow to be aware of such workflow
    # execution related details
    - name: persistedVolume   
      # FIXME: This definition is not DRY because of the volumeMounts
      # sections (refer below): try using 
      # {{workflow.parameters.persistedVolume}}
      # within the respective volumeMounts entries of the containers ?
      value: /within-container-mount-point/

  templates:
  - name: main
    steps:
    - - name: collect-boroughs
        template: collect-lyon-data
        arguments:
          parameters:
          - name: borough
            value: "{{item}}"
          - name: pattern
            value: "{{workflow.parameters.pattern}}"
          - name: results_dir
            value: "{{workflow.parameters.experiment_output_dir}}/stage_1"
          - name: vintage
            value: "{{workflow.parameters.vintage}}"
          - name: persistedVolume
            value: "{{workflow.parameters.persistedVolume}}"
        withParam: "{{workflow.parameters.boroughs}}"
        # LIMITATION:
        # it is NOT (or at least it does NOT seem) possible to define a
        # [workflowStep]((at least it does NOT seem)) with an "outputs" field.
        # Instead what is offered is called 
        # [parameter aggregation](https://stackoverflow.com/questions/60569353/dynamic-fan-in-in-argo-workflows)
        # But this has some drawbacks since the aggregation process collects
        # the results of each step when sometimes it would be much simpler
        # to collect the final result once the loop is done. For example 
        # if each step appends a filename (of its output) in some file, then
        # collecting at each step will be a list of the form
        #   {"first_result": file_a, "second_result": file_a, file_b,
        #    "third_result: file_a, file_b, file_c ...}
        # when we are only interested of the last entry that contains all the
        # filenames.
        #
        # References:
        #  - [this StackOverflow](https://stackoverflow.com/questions/63581823/what-is-the-output-of-loop-task-in-argo)
        #  - [that issue](https://github.com/argoproj/argo-workflows/issues/861)
        #  - [this issue](https://github.com/argoproj/argo-workflows/issues/2393)

    - - name: loop-on-simple-lists
        template: print-python
        arguments:
          parameters:
          - name: message
            value: "{{=sprig.last( [34, 27, 15, 57, 46] ) }}"

    - - name: simpler-print-file-names
        template: print-python
        arguments:
          parameters:
          - name: message
            #
            # List of fails:
            #
            # value: "{{=sprig.last(steps.collect-boroughs.outputs.parameters) }}"
            # python prints (well this is embarassing)
            #     {{=sprig.last(steps.collect-boroughs.outputs.parameters) }}
            #
            # value: "{{=sprig.last( [34, 27, 15, 57, 46] ) }}"
            # python prints
            #    46
            value: "{{=sprig.last(steps.collect-boroughs.outputs.parameters) }}"
            
    - - name: print-file-names
        template: whalesay
        arguments:
          parameters:
          - name: message
            # value: "{{steps.collect-boroughs.outputs.parameters}}"
            # returns:
            #  [
            #    {"resulting-filenames":"/<mnt-point>/junk/stage_1/LYON_1ER_2015/LYON_1ER_BATI_2015.gml"},
            #    {"resulting-filenames":"/<mnt-point>/junk/stage_1/LYON_1ER_2015/LYON_1ER_BATI_2015.gml\n/<mnt-point>/junk/stage_1/LYON_2EME_2015/LYON_2EME_BATI_2015.gml"}
            #  ]   
            value: "{{steps.collect-boroughs.outputs.parameters}}"
  
    - - name: loop-on-split-buildings
        template: split-buildings
        arguments:
          parameters:
          - name: input_filename
            value: "{{item}}"
          - name: output_dir
            # LIMITATION
            #
            # For the above value of the output directory name (output_dir) we
            # would here need to build that name by doing string manipulations 
            # out of the input_filename (that is "{{item}}")
            # For example when the input_filename is
            #    /<mnt-point>/junk/stage_1/LYON_1ER_2015/LYON_1ER_BATI_2015.gml
            # we would need output_dir to be
            #    /<mnt-point>/junk/stage_2
            # where stage_2 is locally (defined and) given i.e. we need to
            #   extract /<mnt-point>/junk/ out of input_filename ...
            #
            # List of fails when in the context of a
            #     withParam:"{{steps.collect-boroughs.outputs.parameters}}"
            #
            # value: "{{=filepath.Dir(item)}}"
            # Above line fails with message
            #    failed to evaluate expression: reflect: call of 
            #    reflect.Value.NumMethod on zero Value (1:10)
            #
            # value: "{{=filepath.Dir(filepath.Dir(item))}}/stage_2"
            # Above line fails with message
            #    failed to evaluate expression: reflect: call of 
            #    reflect.Value.NumMethod on zero Value (1:23)
            #
            # ANALYSIS OF LIMITATION: 
            # the expressions of Argo Workflows are defined with the "expr"
            # micro language (that according to 
            #    https://github.com/antonmedv/expr 
            # "seamlessly integrates with Go".
            # Yet, expressions don't seem to allow for importing Go(lang) 
            # packages thus preventing fo import packages from the standard
            # library like filepath ( https://pkg.go.dev/path/filepath#Base )
            # and only the following subsets of expressions seems to be 
            # currently accepted by expr
            # https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md
            # 
            # value: "{{=sprig.dir(sprig.dir(a/b/bozo))}}/stage_2"
            # As indicated by 
            # [here in the documentation](https://github.com/argoproj/argo-workflows/blob/master/docs/conditional-artifacts-parameters.md#built-in-functions),
            # or [in the expression documentation](https://github.com/argoproj/argo-workflows/blob/master/docs/variables.md#expression)
            # (look for the "Sprig functions" string) and/or illustrated by e.g.
            # [this example](https://github.com/argoproj/argo-workflows/blob/master/examples/expression-reusing-verbose-snippets.yaml)
            # it seems that workflow expressions can use the
            # [sprig Go template library](https://masterminds.github.io/sprig/).
            # Yet the above trial fails with
            #      failed to evaluate expression: invalid operation: 
            #      <nil> / <nil> (1:22)
            #
            # value: "{{=sprig.dir({{item}})}}"
            # Fails with
            #      failed to evaluate expression: a map key must be a quoted
            #      string, a number, a identifier, or an expression enclosed
            #      in parentheses (unexpected token Bracket("{")) (1:12)
            #
            # "{{=sprig.dir(item)}}"
            #      failed to evaluate expression: reflect: Call using 
            #      map[string]interface {} as type string (1:7)
            #
            # "{{=sprig.dir(=item)}}"
            #      failed to evaluate expression: unexpected token 
            #      Operator("=") (1:11)
            #
            # Expressions that are OK
            #   value: "{{=sprig.dir('a/b/bozo')}}"
            #
            # As a kludge (for the true needs of this workflow) we temporarily 
            # use the following "default" value
            # value: "{{workflow.parameters.experiment_output_dir}}/stage_2"
            value: "{{item}}"
          - name: output_filename
            # LIMITATION
            #
            # We here need to express the equivalent of method
            #   DemoSplitBuildings::derive_output_file_basename_from_input(input_filename)
            # as found in
            #   https://github.com/VCityTeam/UD-Reproducibility/blob/master/Computations/3DTiles/LyonTemporal/PythonCallingDocker/demo_split_buildings.py#L16            
            #
            # Thas is, out of the input_filename value
            #    /<mnt-point>/junk/stage_1/LYON_1ER_2015/LYON_1ER_BATI_2015.gml
            # we would need to construct
            #    LYON_1ER_BATI_2015_splited.gml
            # that is first extract the basename of the filename i.e.
            # obtain LYON_1ER_BATI_2015.gml, strip its trailing extension and
            # and add the "_splited.gml" trailing string.
            # According to some clues like
            # https://siongui.github.io/2018/02/25/go-get-file-name-without-extension/
            # this expression could take the following form that alas fails
            # for the same reasons as documented for the above output_dir needs:
            # the expr language does not seem to have acceess to the Golang
            # standard library
            #
            # value: "{{=strings.TrimSuffix(filepath.Base(item), path.Ext(filepath.Base(item)))}}_splited.gml}"
            value: "{{item}}"
        # [This example](https://github.com/argoproj/argo-workflows/blob/master/examples/expression-tag-template-workflow.yaml#L22)
        # mentions that "withParam must be a JSON list encoded as a string".
        # We thus need to split the string representing the filenames with
        # "\n" for return lines and then to convert that list to a JSON list
        # encoded as a list
        # 
        # List of fails:
        # withParam: "{{=toJson(sprig.splitList('\n', steps.collect-boroughs.outputs.parameters)))}}"
        # Fails with
        #     withParam value could not be parsed as a JSON list: 
        #     {{=toJson(sprig.splitList(' 
        #     ', steps.collect-boroughs.outputs.parameters)))}}: invalid 
        #     character '{' looking for beginning of object key string
        #
        # withParam: "{{=toJson(sprig.splitList("\n", steps.collect-boroughs.outputs.parameters)))}}"
        # Fails with 
        #     No Workflow found in given files
        # 
        # withParam: "{{=toJson(sprig.splitList(\"\n\", steps.collect-boroughs.outputs.parameters)))}}"
        # Fails with
        #    withParam value could not be parsed as a JSON list: 
        #    {{=toJson(sprig.splitList("
        #
        #
        # Fails with
        #    withParam value could not be parsed as a JSON list: 
        #    {{=toJson(sprig.last(steps.collect-boroughs.outputs.parameters))}}:
        #    invalid character '{' looking for beginning of object key string
        withParam: "{{=toJson(sprig.last(steps.collect-boroughs.outputs.parameters))}}"

  - name: collect-lyon-data
    inputs:
      parameters:
      - name: borough
      - name: pattern
      - name: results_dir
      - name: vintage
    container:
      image: vcity/collect_lyon_data
      imagePullPolicy: Never
      args: ["python3", "entrypoint.py",
            "--borough",     "{{inputs.parameters.borough}}",
            "--pattern",     "{{inputs.parameters.pattern}}",
            "--results_dir", "{{inputs.parameters.results_dir}}",
            "--vintage",     "{{inputs.parameters.vintage}}",
            "--volume",      "{{workflow.parameters.persistedVolume}}"]
      volumeMounts:                     # same syntax as k8s Pod spec
       # Mount workdir volume within the container
       - name: workdir
         mountPath: "{{workflow.parameters.persistedVolume}}"
    outputs:
      parameters:
      - name: resulting-filenames
        # A single run appends its resulting filenames to the possibly already 
        # existing results file. The results file can already exist for two
        # different reasons:
        #  1/ this is not the first template within the loop (on boroughs) of
        #     this workflow
        #  2/ a previous workflow was run and no clean-up was done.
        #     In other terms this output parameter can hold this container run 
        #     results as well as previous run results (of this container or even
        #     this workflow.
        # FIXME: the above feels like flaky and error prone
        valueFrom:
          # Set the value of this output parameter to the contents of the
          # file designated by this path
          path: "{{workflow.parameters.persistedVolume}}/{{inputs.parameters.results_dir}}/Resulting_Filenames.txt"
            
  - name: split-buildings
    inputs:
      parameters:
      # Absolute file path
      - name: input_filename
      # Absolute directory path 
      - name: output_dir
      # Filename (relative to output_dir)
      - name: output_filename
    container:
      image: vcity/3Duse
      imagePullPolicy: Never
      workingDir: /root/3DUSE/Build/src/utils/cmdline/
      # https://github.com/VCityTeam/UD-Reproducibility/blob/master/Computations/3DTiles/LyonTemporal/PythonCallingDocker/docker_split_buildings.py
      args: ["splitCityGMLBuildings",
            "--input-file",      "{{inputs.parameters.input_filename}}",
            "--output-filename", "{{inputs.parameters.output_filename}}",
            "--output-dir",      "{{inputs.parameters.output_dir}}"]
  
  # On debugging purposes
  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]

  - name: print-message
    inputs:
      parameters:
      - name: message
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo `{{inputs.parameters.message}}`"]
  
  - name: print-python
    inputs:
      parameters:
      - name: message
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        print("{{inputs.parameters.message}}")